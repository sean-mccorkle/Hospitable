#!/usr/bin/env perl
# Program:     pbsHosp
# Programmer:  Sean R. McCorkle
# Language:    perl
#
# Description: Given a unix command template containing generic numbered 
#              arguments ($1,$2,...) to be expanded/replaced for each job, 
#              this will generate a series of PBS scripts suitable for 
#              parallel execution via qsub.  One script is generated for 
#              each line of tuples given on stdin, the first whitespace 
#              separated value replacing all $1's found in the
#              template, the 2nd replacing all $2's, etc.
#
#              In the template script (unix command), $# will be replaced by the process
#              (or input line) number.  First process is 0 unless overridden 
#              by -n.
#
#              A backslash (\) escape can be used to surpress template substitution,
#              so that strings like $1 can be passed through to the actual unix command
#              (useful for things like awk scripts). Where occurrences of $1 are replaced
#              by the first in each input tuple, \$1 becomes $1 in the executed command.
#              
#
# Usage:
#
#        pbsHosp  [-p <path>] [-c<dir>] [-n<num>] [-P<str>] 'unix command' <tuples
#
# Options:
#
#       -c <dir>   - use <dir> as qsub working directory instead of $cwd
#       -n <num>   - start process numbering at <num> instead of 0
#       -p <path>  - include <path> string in path 
#                    (quote multiples,space separated)
#       -P <str>   - use <str> as prefix for generated qsub filenames, default is "pbsHosp"
#
# Example:
#
#      pbsHosp -p ~/src/bowtie2-2.2.5 'bowtie2 -k $3 -p 8 -x ../Transcripts/bn_trans -1 $1 -2 $2 -S k$3test.$#.sam'
#
#      generates one file pbsHosp.<n>.qsub for each line of input.  To submit,
#
#        foreach f ( pbsHosp.*.qsub )
#            qsub $f
#
# TODO 
#
#  1) make bash default shell, option for C-shell?
#  2) a bunch of potential qsub options:
#        .  number of processors
#        .  output/error filenames
#  3) option to change the qsub jobfile name
#

use strict;

use File::Basename;
use File::Path;
our ( $opt_c, $opt_n, $opt_p, $opt_P );
use Getopt::Std;
use Cwd;

#
# this needs to be read in somehow!!!!
#

my $usage = "usage: pbsHosp [-p <path>] [-c <dir>] [-n<num>] [-P<str>] 'unix command' < tuples\n";

getopts( "c:n:p:P:" ) || die $usage;

die $usage unless ( @ARGV );

my $prefix = $opt_P ? $opt_P : "pbsHosp";

my $first_proc_num = $opt_n ? $opt_n : 0;

my $command_template = shift;


                                 ################
                                 # Main Program #
                                 ################


my $process_number = $first_proc_num;

while ( <> )                 # for each input tuple
   {
    chomp;
    s/^\s+//;
    s/\s+$//;
    my @args = split( /\s+/ );

    my $user_cmd = expand_template( $command_template, $process_number, @args);
    print "$user_cmd\n";
    write_job_file( "$prefix.$process_number.qsub", $user_cmd );

    $process_number++;
   }


print basename( $0 ), " ends.   ", $process_number - $first_proc_num, " processes.\n";


                                ###############
                                # Subroutines #
                                ###############


sub  expand_template
   {
    my ( $template, $procnum, @args ) = @_;
    $template .= " ";              # to handle regexp at end of line
    $template = " " . $template;   # to handle regexp (\) condition at beginning
    foreach my $i ( 0..$#args )
       {
        my $j = $i+1;
        my $val = $args[$i];
        $template =~ s/([^\\])(\$?\$$j)([^\d])/\1$val\3/g;  # handle vestigle $$1 etc
                                                   # from Condor hosp
      }
    $template =~ s/([^\\])\$\#/\1$procnum/g;

    $template =~ s/\\(\$?\$\d+[^\d])/\1/g;         # clear the \ from \$N escapes

    $template =~ s/^ //;                           # remove added blank from beginning

    return( $template );
   }


sub  write_job_file
   {
    my ( $jfile, $user_command ) = @_;

    my $wd = $opt_c ? $opt_c : getcwd();
    open( JOB, ">$jfile" ) || die "can't write to $jfile: $!\n";
    print JOB <<EndOfJob;
#!/bin/tcsh
### Job name
#PBS -N $jfile
#PBS -k oe
### Queue name (small, medium, long, verylong)
##PBS -q hpc_compute
### Number of nodes (node property ev6 wanted)
#PBS -l nodes=1,walltime=30:00:00
### Declare job non-rerunable
##PBS -r n
### Output files
##PBS -e test.err   not sure why these 
##PBS -o test.log
### Mail to user
##PBS -m ae

# This job's working directory
echo Initial working directory is \$PBS_O_WORKDIR
cd $wd

echo Running on host `hostname`
echo Time is `date`
echo Working directory is now `pwd`
set path = ( $opt_p \$path )
rehash
echo path is \$path

# User's command:

$user_command

echo Finished: `date`

EndOfJob
    close( JOB );
   }
